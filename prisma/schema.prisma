// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  handle    String   @unique
  email     String?  @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authProviders AuthProvider[]
  walletAccounts WalletAccount[]
  bets          Bet[]
  deposits      Deposit[]
  withdrawals   Withdrawal[]
  leaderboardDaily LeaderboardDaily[]
  fairnessSeeds FairnessSeed[]

  @@map("users")
}

model AuthProvider {
  id         String @id @default(cuid())
  userId     String
  provider   String // 'local', 'twitter', 'google', etc.
  providerId String
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("auth_providers")
}

model WalletAccount {
  id        String   @id @default(cuid())
  userId    String
  currency  String   // 'BTC', 'ETH', 'SOL', 'USDC', 'USDT'
  available BigInt   @default(0) // in smallest units
  locked    BigInt   @default(0) // in smallest units
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  ledgerEntries LedgerEntry[]

  @@unique([userId, currency])
  @@map("wallet_accounts")
}

model LedgerEntry {
  id        String   @id @default(cuid())
  accountId String
  amount    BigInt   // positive for credits, negative for debits
  currency  String
  type      String   // 'DEPOSIT', 'WITHDRAWAL', 'BET_STAKE', 'BET_WIN', 'BET_REFUND', 'FAUCET', 'TRANSFER'
  refId     String?  // reference to related entity (betId, depositId, etc.)
  meta      Json?    // additional metadata
  createdAt DateTime @default(now())

  account WalletAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("ledger_entries")
}

model Bet {
  id                String   @id @default(cuid())
  userId            String
  game              String   // game identifier
  currency          String
  stake             BigInt   // in smallest units
  potentialPayout   BigInt   // in smallest units
  outcome           String?  // game-specific outcome
  resultMultiplier  Float?   // final multiplier applied
  status            BetStatus @default(PENDING)
  serverSeedHash    String   // commitment
  clientSeed        String
  nonce             Int
  revealedServerSeed String? // revealed after bet resolution
  rngTrace          Json?    // trace of RNG calls for verification
  params            Json?    // game-specific parameters
  createdAt         DateTime @default(now())
  resolvedAt        DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bets")
}

enum BetStatus {
  PENDING
  WON
  LOST
  CASHED_OUT
  REFUNDED
}

model GameConfig {
  id          String   @id @default(cuid())
  game        String   @unique
  houseEdgeBps Int     @default(200) // basis points (200 = 2%)
  params      Json?    // game-specific configuration
  updatedAt   DateTime @updatedAt

  @@map("game_configs")
}

model FairnessSeed {
  id               String    @id @default(cuid())
  userId           String?   // null for global seeds
  serverSeed       String    // secret seed
  serverSeedHash   String    // public commitment
  active           Boolean   @default(true)
  createdAt        DateTime  @default(now())
  revealedAt       DateTime?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("fairness_seeds")
}

model Deposit {
  id                    String        @id @default(cuid())
  userId                String
  currency              String
  amount                BigInt        // in smallest units
  paymentMethod         String        @default("crypto") // 'crypto' for Web3
  status                DepositStatus @default(PENDING)
  walletAddress         String?       // generated wallet address
  transactionHash       String?       // blockchain transaction hash
  blockNumber           Int?          // block number
  requiredConfirmations Int?          // required confirmations
  currentConfirmations  Int?          @default(0) // current confirmations
  completedAt           DateTime?     // completion timestamp
  meta                  Json?         // additional metadata
  createdAt             DateTime      @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deposits")
}

enum DepositStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

model Withdrawal {
  id              String           @id @default(cuid())
  userId          String
  currency        String
  amount          BigInt           // in smallest units
  fee             BigInt           // withdrawal fee in smallest units
  netAmount       BigInt           // amount after fees in smallest units
  walletAddress   String           // destination wallet address
  withdrawalMethod String          @default("crypto") // 'crypto' for Web3
  status          WithdrawalStatus @default(PENDING)
  transactionHash String?          // blockchain transaction hash
  blockNumber     Int?             // block number
  processingTime  String?          // estimated processing time
  completedAt     DateTime?        // completion timestamp
  meta            Json?            // additional metadata
  createdAt       DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("withdrawals")
}

enum WithdrawalStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REJECTED
}

model LeaderboardDaily {
  id     String   @id @default(cuid())
  userId String
  pnl    BigInt   // profit/loss in smallest units
  date   DateTime // date only (no time)
  rank   Int?     // calculated rank for the day

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("leaderboard_daily")
}